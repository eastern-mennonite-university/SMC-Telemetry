# -*- coding: utf-8 -*-
"""DDriverDisplay.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vkBn2SsP46IAkIrvcZR8S8VzX4UKz-4-
"""

## Class for on board driver indicators for speed and acceleration.
# This is a dependent class that will be run on LORAsend so that 
# it is running on the onboard pi. Velocity and acceleration will then be displayed
# in the LORAsend class using the TM1637 library to display on seven segment LED.
import DGPSread
import time
import RPi.GPIO as GPIO
import tm1637

#initialize TM1637 display
tm_vel = tm1637.TM1637(clk = 20, dio = 19) #choose display pins
tm_acc = tm1637.TM1637(clk = 18, dio = 17) #choose display pins

velocity = None #need global variables for velocity and acceleration
avg_acceleration = None

# Method to calculate acceleration from GPS velocity
def Speeddata():
    while true:
      velocity = DGPSread.GPSread(int.from_bytes(speedKH, 'big') # method inside GPS to take VTG data and then converting byte to int       
      time = [] #generate array with time
      time = DGPSread.GPSread(int.from_bytes(stat,'big')).append() # Take universal time from GPS data so it is in sync with speed. It is called stat from RMC data in DGPSread
      speed = [] # generate array with speeds to calculate acceleration
      speed = velocity.append()
      time.sleep(1) #sleep to allow some data to be filled into arrays
      acceleration = []
        for i in speed: #use for loop to calculate change in velocity over change in time
          acceleration[i] = (speed(i) - speed(i-1)) /  (time(i) - time(i-1)) #calculate acceleration

          # Caclculate moving average to smooth data
          max_samples = 10 #set windows size of moving average
          avg_acceleration = mean(acceleration) #calculate average

          if len(acceleration) == max_samples: #delete last sample to move window
              readings = np.delete(readings, 0)
          
      tm_vel.number(velocity)
      tm_acc.number(avg_acceleration)
      return true 
    except:
      return false+

# Method to make LED blink from GPS velocity
def SMC_LED():
  while true:
    speed = DGPSread.GPSread(int.from_bytes(speedKH, 'big') # method inside GPS to take VTG data and then converting byte to int